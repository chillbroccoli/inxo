// Generated by Xata Codegen 0.23.2. Please do not edit.
import type { BaseClientOptions, SchemaInference, XataRecord } from "@xata.io/client";
import { buildClient } from "@xata.io/client";

const tables = [
  {
    name: "tasks",
    columns: [
      { name: "status", type: "string", notNull: true, defaultValue: "TODO" },
      { name: "dueDate", type: "datetime", notNull: true, defaultValue: "now" },
      { name: "name", type: "string" },
      { name: "userId", type: "string" },
      { name: "priority", type: "string", notNull: true, defaultValue: "LOW" },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Tasks = InferredTypes["tasks"];
export type TasksRecord = Tasks & XataRecord;

export type DatabaseSchema = {
  tasks: TasksRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL: "https://Kacper-Malek-s-workspace-k14bf6.eu-west-1.xata.sh/db/inxo",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
